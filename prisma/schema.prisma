// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AudienceCategory {
  id    Int    @id @default(autoincrement())
  title String @unique
  plays Play[]
  tayloredPlays TayloredPlay[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  title String @unique
  plays Play[]
  tayloredPlays TayloredPlay[]
}

model Play {
  id       Int     @id @default(autoincrement())
  title    String
  abstract String?
  duration Int?

  audienceCategories AudienceCategory[]
  tags               Tag[]
}

model TayloredPlay {
  id       Int     @id @default(autoincrement())
  title    String
  concept  String

  audienceCategories AudienceCategory[]
  tags               Tag[]
}

model Artist {
  id             Int     @id @default(autoincrement())
  firstname      String
  lastname       String
  biography      String?
  email          String?
  facebook_link  String?
  instagram_link String?
}

model Company {
  id             Int     @id @default(autoincrement())
  name           String  @unique
  description    String
  email          String
  facebook_link  String?
  instagram_link String?

  companyStories  CompanyStory[]
  companyPartners CompanyPartner[]
}

model CompanyStory {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  start       DateTime
  end         DateTime?
  Company     Company?  @relation(fields: [companyId], references: [id])
  companyId   Int?
}

model CompanyPartner {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  logo_src    String?
  Company     Company? @relation(fields: [companyId], references: [id])
  companyId   Int?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role  @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  ARTIST
}